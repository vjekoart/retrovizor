{{#> layout.page title=data.views.text.title }}
    <p>Textual content, like articles, blog posts, thoughts, and similar...</p>

    <h2>Initial **short** articles</h2>
    <p>Not for sharing - until articles are expanded and improved, but should be good enough for first publish.</p>

    <h3>What is Retrovizor?</h3>
    <p>retròvīzor, <em>noun</em> - rear-view mirror</p>
    <p>...we see the world through a rear-view mirror. We march backwards into the future. <strong>Staviti konkretan citat</strong></p>
    <p>Naziv ove digitalne stranice je referenca na rad Marshalla McLuhana, na futurizam i pogled u budućnost. Cilj ove stranice je sakupljati programe, eksperimente, i osobna razmišljanja vezana uz digitalnu domenu i njezin utjecaj na pojedinca i društvo.</p>
    <p>Sadržaj, razmišljanaj i programski kod, ove stranice nema teret savršenstva, efikasnosti, niti korisnosti. Ne želi niti teret završenosti, tako da neke misli i programski kod mogu biti nepotpuni.</p>

    <h3>[Thought for juniors] Small example of declarative thinking</h3>
    <p>One-line definition of declarative paradigm</p>
    <p>How can we improve a codebase we're working on by having this in mind? The general idea is to express what code does, insteda of how. To improve a codebase (in product company environment), we can start making the code more readable starting from the higher level.</p>
    <p>Side note: starting from the higher level is beneficial for the whole team, it's easier to understand the bigger picture then digging into details. It takes less time for every team member to understand the bigger picture, which in turn improves communication and cooperation.</p>
    <p>One major challenge is that we tend to avoid multiple layers. We almost always end up with huge source code files, tons of files, but we shy away from layers? Let's not do that.</p>
    <p>[EXAMPLE]: A refactor of the JS function (very similar to the production-level codebase in enterprise systems), where we extract logic into utility file or something, to make the logic clear.</p>
    <p>[EXAMPLE] Same example, but by using SPA framework like Angular</p>

    <h3>[Thought for juniors] Know your platform</h3>
    <p>Don't be a React developer, be a software developer.</p>
    <p>Learn the platform you're working with, native APIs, capabilities, build your own build system, your own framework and similar.</p>
    <p>If you're frontend, learn basics of backend and vice-versa. Write something, at the end of the day you'll communicate with them.</p>
    <p>Better for everyday work, there's usually no technical problem we don't know how to tackle, or where to look for knowledge. Better for career, frameworks come and go, platforms not so often.</p>
{{/layout.page}}
