{{#> layout.page
    title="Boring web frontend development"
    view="boring-web-frontend-development"
}}
    <retro-content-block data-date="2025-02-01">
        <span slot="title">Boring web frontend development</span>
    </retro-content-block>

    <p>Modern web frontend development is quite exciting. Interesting new tools and concepts are being published almost on
    a weekly basis. Every now and then a new paradigm emerges that promises to fundamentally change how web interfaces are
    built. Indeed, some of them really do change how programmers write web.</p>

    <p>If that is exciting, then plain old HTML, CSS, and Javascript are boring. These technologies evolve slowly, they're
    always backwards compatible, and they don't experience groundbreaking paradigm changes. Albeit boring, they're the basis
    of every website there is.</p>

    <p>This text explores the concept of a boring tool for building the web - one that could feature:</p>
    <ul>
        <li><strong>A native feel</strong>, focusing on core technologies (HTML, CSS, Javascript) rather than the tool itself.</li>
        <li>A straightforward, strict <strong>architecture</strong> designed to make the codebase structure predictable and, yes, boring.</li>
        <li>A pleasant <strong>developer experience</strong> that enables the development of production-ready web interfaces.</li>
    </ul>

    <h3>Native feel</h3>

    * DX: code that programmer writes, is close or almost identical to the code that's sent to client device.
    * DX: Using native web frontend technologies (HTML, CSS, JS, browser APIs) with a thin layer of abstractions (e.g. Lit for web components) ...to improve DX where it makes sense
        * Native ali sa thin layer of abstraction da uljepša fundamental tehnologije u određenim scenarijima
        * Budući je cilj podržavati production-level environment baziran na web browser tehnologijama, mijenja se sporo. Dodaju se, miču i
        mijenjaju tanki slojevi abstrakcije kako se underlying mechanisms improve and change.
    * Performance: SSR with dynamic parts - fastest rendering, with the option to include dynamic parts if needed
        * Note: SSR usually requires some logic on the backend, e.g. for user sessions, currently not covered - in theory integration possible with every web framework that supports using HTML files for views. 

    <h3>Architecture</h3>

    * Straightforward: Views + library
        * Views in the center, views represent the main contact point between users and a product.
    * Well structured: Tool expects a strict file structure, naming conventions, and similar

    <h3>Developer experience</h3>

    * Build system
    * Test system
    * Opinionated coding style

    <h3>In practice</h3>

    This website built using a tool built with this stuff on mind.

    Revizor - NodeJS library, explores this concepts mentioned above.

    Work in progress, currently part of the retrovizor.xyz repository. See the source of this repository to see file structure, and check out library in `revizor` folder.
{{/layout.page}}
