{{#> layout.page
    title="Boring web frontend development"
    view="boring-web-frontend-development"
}}
    <retro-content-block data-date="2025-02-01">
        <span slot="title">Boring web frontend development</span>
    </retro-content-block>

    <p>Modern web frontend development is quite exciting. Interesting new tools and concepts are being published almost on
    a weekly basis. Every now and then a new paradigm emerges that promises to fundamentally change how web interfaces are
    built. Indeed, some of them really do change how programmers write web.</p>

    <p>If that is exciting, then plain old HTML, CSS, and Javascript are boring. These technologies evolve slowly, they're
    always backwards compatible, and they don't experience groundbreaking paradigm changes. Albeit boring, they're the basis
    of every website there is.</p>

    <p>This text explores the concept of a boring tool for building the web - one that could feature:</p>
    <ul>
        <li><a href="#native-feel">A native feel</a>, focusing on core technologies (HTML, CSS, Javascript) rather than the tool itself.</li>
        <li>A straightforward, strict <a href="#architecture">architecture</a> designed to make the codebase structure predictable and, yes, boring.</li>
        <li>A pleasant <a href="#developer-experience">developer experience</a> that enables the development of production-ready web interfaces.</li>
    </ul>

    <h3 id="native-feel">Native feel</h3>

    * Paragraf koji objašnjava što znači native feel i koja mu je svrha: To achieve native feel... || Native feel means...
        * Native feel znači: kod koji se piše je vrlo sličan, skoro identičan po sadržaju, onom kodu koji se vrti na klijentskoj strani, nema previše iznenađenja
        * Native feel znači: kod koji se piše je što bliži osnovnim tehnologijama, npr zadnja službena verzija JS-a, CSS, ili npr. HTML sa jednostavnim templating proširenjem
    * Paragraf koji objašnjava da je u praksi potreban thin layer of abstraction nad osnovnim tehnologijama kako bi se poboljšao DX, cross-browser compatibility, i overall performance
      budući se native funkcionalnosti razvijaju sporo, te im nije fokus DX već funckionalnost u kontekstu postojećih tehnologija
        * Tanki sloj apstrakcije se mijenja, ali mijenja se sporo kako se mijenjaju core tehnologije, što pojednostavljuje održavanje
        * Primjer, lit.dev za pisanje web komponenti
        * Primjer, suvremeni CSS organiziran unutar modula je dovoljno dobar i za najkompleksnije i najzahtjevnije projekte
    * Another aspect of native feel: end user and web browser. Što se više oslanja na mehanizme web browsera, poput cachinga i optimizacije renderinga to aplikacija ima veći native feel.
        Npr završili smo hype krug SPA-ova znamo kada i gdje ih koristiti, također znamo da je najefikasnija web stranica
        ona koja je SSR, ili kombinacija SSR+dynamic parts kada sadrži heavy interaktivne dijelove
    * Note: SSR usually requires some logic on the backend, e.g. for user sessions, currently not covered in this exploration, will be added in the next phase.

    <h3 id="architecture">Architecture</h3>

    * Uvod: Dobra arhitektura je ona koja je straightforward i strict kako bi se smanjila količina iznenađnja u codebase-u, što olakšava i individual i team work.
    * Jedna od mogućih interpretacija arhitekture je ona koja cijelu aplikaciju na high-level dijeli na dva dijela: views, kao user contact points i library, kao skup komponenti, utilityis,... od kojih su sagrađeni views.
    * Prednost stavljanja views-a u centar je user focus - sav kod podređen je funkcionalnostima za user interactions
    * Note: to ensure structure, a boring tool could force a strict file structure, naming conventions, and similar

    <h3 id="developer-experience">Developer experience</h3>

    * Uvod: a boring tool has great developer experience by just doing the job. While it's quite complicated to minize developers interaction with tool in practice, at least major
    elements of good DX su se iskristalizirali:

    * Build system, for both development and production build
    * Test system with helpful abstractions for testing components, units, and the whole application.

    <h3>In practice</h3>

    I've been playing with aforementioned ideas and I've built a small tool, Revizor, with which I built this website. The goal was to create a reusable
    set of helpers that can be used in other projects. I'm still not sure if the goal was achieved.

    Revizor is currently placed in a separate folder inside a repository of retrovizor.xyz.
{{/layout.page}}
