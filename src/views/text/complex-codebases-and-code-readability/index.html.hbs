{{#> layout.page
    title="Complex codebases and code readability"
    view="complex-codebases-and-code-readability"
}}
    <retro-content-block data-date="2025-01-15">
        <span slot="title">Complex codebases and code readability</span>
    </retro-content-block>

    <p>A collection of thoughts for tackling complex codebases in a simple and gradual manner.</p>

    <h3 id="layers-and-abstractions">Layers and abstractions</h3>
    <p>
        Complex product codebases often have main entry files, e.g. <code>main.js</code>, that look like this:
    </p>
    <pre>
        /* main.js */
        import { importantModule } from "Y";

        function someUtility () { ... }

        importantModule.register( "N-1" );
        importantModule.register( "N-2" );
        ...
        importantModule.register( "N-N" );

        server.start()
              .then (() => { ... })
              .catch(() => { ... });</pre>
    <p>
        With so many technical details, it's hard to grasp the general idea of what the program does. To reduce the cognitive
        load and to improve both the extensibility and stability of the code, lower-level logic could be extracted to separate
        files:
    </p>
    <pre>
        /* main.js */
        import { importantModule } from "Y";
        import { someUtility     } from "Z";
        import
        {
            handleServerErrors,
            handleServerStart
        } from "main.bits.js";

        importantModule.register( "N-1" );
        importantModule.register( "N-2" );
        ...
        importantModule.register( "N-N" );
        
        server.start()
              .then ( handleServerStart  )
              .catch( handleServerErrors );</pre>

    <h3 id="embracing-large-files">Embracing large files</h3>
    <p>Another common characteristic is that programmers tend to shy away from large files.</p>
    <p>
        Although it's problematic to have complex and large files with tons of unfathomable code, it's perfectly
        fine to have large files with a simple and straightforward structure.
    </p>
    <p>
        For example, there's nothing wrong with having a large router file:
    </p>
    <pre>
        /* router.js */
        Router.routes
        (
            {
                path       : "/",
                controller : HomeController
            },
            {
                path       : "/projects/",
                controller : ProjectsController
            },
            ...
        );</pre>
    <p>
        These files, however large, are still clear and easy to read due to the predictability of their structure.
        Sometimes it's more beneficial to have all the glue logic in one place, rather than scattered around modules.
    </p>

    <h3 id="embracing-whitespace">Embracing whitespace</h3>
    <p>
        Another caveat connected with large files is whitespace. In an attempt to make the code look concise,
        programmers tend to remove whitespace, which actually improves readability and separates different logical operations.
    </p>
    <p>We can easily go from this:</p>
    <pre>
        function myFunction(x) {
            const data = getData();
            data.transformWith(x);
            data.secure();
            return data.pretty();
        }</pre>
    <p>...to this version that breathes and has clear visual indicators about different logical operations:</p>
    <pre>
        function myFunction ( x )
        {
            const data = getData();

            data.transformWith( x );
            data.secure();

            return data.pretty();
        }</pre>
    <p>
        With a combination of predictable structure and code with enough whitespace, it's possible to
        drastically improve code readability.
    </p>
    <p>Code, like natural text, has a rhythm. A good programmer understands and follows this rhythm.</p>

    <h3 id="respecting-chronology-with-function-hoisting">Respecting chronology with function hoisting</h3>
    <p>
        Javascript has an interesting mechanism called <a href="https://developer.mozilla.org/en-US/docs/Glossary/Hoisting" target="_blank">hoisting</a>
        that can be used to improve readability in some cases.
    </p>
    <p>
        In short, hoisting is a process that moves the declaration of functions and some variables to the top of their scope,
        prior to the execution of the code - enabling usage of functions before they are declared.
    </p>
    <p>This can be useful to refactor something like this:</p>
    <pre>
        /* main.js */
        function someRandomUtility    () { ... }
        function anotherRandomUtility () { ... }

        function main ()
        {
            ...
            someRandomUtility();
            ...
            anotherRandomUtility();
            ...
        }</pre>
    <p>
        ...into something where the main idea of the file is explicitly present at the top,
        making it easier to spot when initially opening the file:
    </p>
    <pre>
        /* main.js */
        function main ()
        {
            ...
            someRandomUtility();
            ...
            anotherRandomUtility();
            ...
        }

        function someRandomUtility    () { ... }
        function anotherRandomUtility () { ... }</pre>
    <blockquote>
        Hoisting doesn't work for
        <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_classes#class_declaration_hoisting" target="_blank">classes</a>,
        nor for
        <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#variable_hoisting" target="_blank">
        let|const</a> keywords.
    </blockquote>
{{/layout.page}}
